name: CI

on: [push, pull_request]

env:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  POSTGRES_DB: test

  MYSQL_USER: test
  MYSQL_DATABASE: test
  MYSQL_PASSWORD: password

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - uses: actions/checkout@v4

      - run: npm install -g corepack@latest
      - run: corepack enable
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - run: pnpm i
      - run: pnpm run lint
      - run: pnpm run test

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - run: npm install -g corepack@latest
      - run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'pnpm'
      - run: pnpm i
      - run: pnpm lint

  test-sqlite:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    env:
      DB: sqlite

    steps:
      - uses: actions/checkout@v4
      - run: npm install -g corepack@latest
      - run: corepack enable
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - run: pnpm i
      - run: pnpm test

  test-postgres:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 22.x]
        postgres-version: [14, 15, 16, 17, latest] # see https://hub.docker.com/_/postgres

    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      DB: postgres

    steps:
      - uses: actions/checkout@v4

      - run: npm install -g corepack@latest
      - run: corepack enable
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - run: pnpm i
      - run: pnpm test

  test-mysql:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 22.x]
        mysql-version: [lts, latest] # see https://hub.docker.com/_/mysql/

    services:
      mysql:
        image: mysql:${{ matrix.mysql-version }}
        env:
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ env.MYSQL_PASSWORD }}
          MYSQL_USER: ${{ env.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ env.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries 5
    env:
      DB: mysql

    steps:
      - uses: actions/checkout@v4
      - run: npm install -g corepack@latest
      - run: corepack enable
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - run: pnpm i
      - run: pnpm test

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: npm install -g corepack@latest
      - run: corepack enable
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts
          cache: 'pnpm'
      - run: pnpm i
      - run: pnpm build
